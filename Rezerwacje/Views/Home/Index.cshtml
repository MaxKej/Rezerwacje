@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        #rezerwacje {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* Trzy kolumny */
            gap: 10px; /* Odstępy między kafelkami */
        }

        .kafelka {
            border: 1px solid lightgray;
            padding: 20px;
            text-align: center;
            font-size: 24px;
        }

        .kafelka:hover{
            cursor: pointer;
            border-color: black;
        }

        /* Styl dla okienka dialogowego (modal) */
        .modal {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1;
            background-color: white;
            border: 1px solid #ccc;
            padding: 20px;
            max-width: 100%; /* Maksymalna szerokość modalu */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Styl dla przycisków modalu */
        .modal button {
            margin: 10px;
            padding: 8px 20px;
            border: none;
            cursor: pointer;
        }

        /* Styl dla tła modalu */
        .modal-background {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 0;
        }

    </style>
</head>
<body>

<div class="text-center">
    <h1 class="display-4">Witaj</h1>
@*    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>*@
</div>

<button onclick="showFilter()">Filtruj rezerwacje</button>
    <form id="filterForm" method="post" style="display: none;">
        <label>Pokaż wygasłe</label>
        <input type="checkbox" id="wygasłe"/>
        <label>Pokaż trwające</label>
        <input type="checkbox" id="trwające" />
        <label>Pokaż przyszłe</label>
        <input type="checkbox" id="przyszłe" />
        <button id="zastosuj">Zastosuj</button>
    </form>

<div id="rezerwacje"></div>
    <div id="myModal" class="modal">
        <div class="modal-content">
            <p>Czy na pewno chcesz usunąć tę rezerwację?</p>
            <button id="confirmDelete">Tak</button>
            <button id="cancelDelete">Anuluj</button>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async (event) => {
            let userBookings = await getAllUserBookings();
            let userName = await userData();
            displayUserBookings(userBookings, userName, true, true, true);
        });

        function displayUserBookings(userBookings, userName, expired, ongoing, future) {
            let time = currentTime();
            const dniTygodnia = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'];
            const userBookingsList = document.getElementById("rezerwacje");
            userBookingsList.innerHTML = "";

            userBookings.sort((booking1, booking2) => {
                const date1 = new Date(booking1.beginOfBooking);
                const date2 = new Date(booking2.beginOfBooking);

                if (date1 < date2) {
                    return -1;
                } else if (date1 > date2) {
                    return 1;
                }
                return 0;
            });

            userBookings.forEach(userBooking => {
                if (userBooking.userName === userName || userName === "Admin@example.com") {
                    const userBookingItem = document.createElement("div");
                    userBookingItem.id = `booking-${userBooking.id}`; // Unikalne id kafelka

                    const bookingDate_s = new Date(userBooking.beginOfBooking);
                    const bookingDate_e = new Date(userBooking.endOfBooking);

                    if (time > dateTrim(bookingDate_e)) {
                        if (expired) userBookingItem.style.backgroundColor = "red";
                        else return;
                    } else if (time > dateTrim(bookingDate_s) && time < dateTrim(bookingDate_e)) {
                        if (ongoing) userBookingItem.style.backgroundColor = "yellow";
                        else return;
                    } else {
                        if (future) userBookingItem.style.backgroundColor = "lightblue";
                        else return;
                    }

                    const date = formatDate(bookingDate_s);
                    let indeksDnia = bookingDate_s.getDay();
                    const hours_s = bookingDate_s.getHours();
                    const minutes_s = bookingDate_s.getMinutes().toString().padStart(2, '0');
                    const hours_e = bookingDate_e.getHours();
                    const minutes_e = bookingDate_e.getMinutes().toString().padStart(2, '0');

                    userBookingItem.innerHTML = `${dniTygodnia[indeksDnia]} <br> ${date} <br> ${hours_s}:${minutes_s} - ${hours_e}:${minutes_e} <br> ${userBooking.description}`;
                    userBookingItem.classList.add('kafelka');

                    userBookingItem.addEventListener("click", () => {
                        const modal = document.getElementById("myModal");
                        modal.style.display = "block";

                        const confirmButton = document.getElementById("confirmDelete");
                        const cancelButton = document.getElementById("cancelDelete");

                        confirmButton.addEventListener("click", async () => {
                            // Pobierz ID rezerwacji z atrybutu data-booking-id przycisku Usuń
                            const bookingId = userBookingItem.id.split("-")[1];

                            await deleteUserBooking(bookingId);
                            modal.style.display = "none";
                            userBookingItem.remove(); // Usuń kafelek po usunięciu rezerwacji
                        });

                        cancelButton.addEventListener("click", () => {
                            modal.style.display = "none";
                        });
                    });

                    userBookingsList.appendChild(userBookingItem);
                }
            });
        }

        async function deleteUserBooking(userBookingId) {
            try {
                const response = await fetch(`/api/userbooking/delete/${userBookingId}`, {
                    method: "DELETE",
                });
                if (response.ok) {
                    console.log("Booking deleted successfully!");
                } else if (response.status === 404) {
                    console.error("Booking not found");
                } else {
                    console.error("Failed to delete category");
                }
            } catch (error) {
                console.error("An error occurred:", error);
            }
        }


        function showFilter() {
            const filterForm = document.getElementById("filterForm");
            if (filterForm.style.display === "block")
                filterForm.style.display = "none";
            else
                filterForm.style.display = "block";
        }

        zastosuj.addEventListener("click", async event => {
            event.preventDefault();
            let userBookings = await getAllUserBookings();
            let userName = await userData();
            const e = (document.getElementById("wygasłe")).checked;
            const p = (document.getElementById("trwające")).checked;
            const f = (document.getElementById("przyszłe")).checked;
            displayUserBookings(userBookings, userName, e, p, f);
        });

    </script>
</body>
</html>